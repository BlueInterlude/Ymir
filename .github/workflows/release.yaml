name: Release

on:
  push:
    tags: [ "v*" ]

jobs:
  build-windows:
    name: windows-${{ matrix.c_compiler }}-${{ matrix.x86_simd_ext.name }}-${{ matrix.subsystem.name }}
    runs-on: windows-latest

    strategy:
      fail-fast: false

      matrix:
        build_type: [Release]
        # Notes about compilers:
        # - MSVC (cl) produces much slower code and takes a long time to complete the LTO step
        c_compiler: [clang]  # [clang, cl]
        subsystem:
          - name: Console
            enable_devlog_option: "ON"
          - name: Win32
            enable_devlog_option: "OFF"
        x86_simd_ext:
          - name: "SSE2"
            enable_avx2_option: "OFF"
          - name: "AVX2"
            enable_avx2_option: "ON"
        include:
          - c_compiler: clang
            cpp_compiler: clang

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        echo "artifact-name=ymir-windows-${{ matrix.x86_simd_ext.name }}-${{ matrix.subsystem.name }}-${{ github.ref_name }}" >> "$GITHUB_OUTPUT"

    - name: Configure MSVC
      if: ${{ matrix.c_compiler == 'cl' }}
      uses: TheMrMilchmann/setup-msvc-dev@v3
      with:
        arch: x64

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DBUILD_SHARED_LIBS=OFF
        -DYmir_AVX2=${{ matrix.x86_simd_ext.enable_avx2_option }}
        -DYmir_ENABLE_IPO=ON
        -DYmir_ENABLE_DEVLOG=${{ matrix.subsystem.enable_devlog_option }}
        -DYmir_ENABLE_IMGUI_DEMO=OFF
        -DYmir_ENABLE_SANDBOX=OFF
        -DYmir_ENABLE_YMDASM=OFF
        -S ${{ github.workspace }}
        -G Ninja

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --parallel

    ## FIXME: Catch2 integration still isn't working
    #- name: Test
    #  working-directory: ${{ steps.strings.outputs.build-output-dir }}
    #  run: ctest --build-config ${{ matrix.build_type }}

    - name: Package artifacts
      run: |
        md licenses
        xcopy /s /y apps/ymir-sdl3/res/licenses/* licenses/
        copy /b /y vendor/Catch2/LICENSE.txt licenses/Catch2-LICENSE.txt
        copy /b /y vendor/cereal/LICENSE licenses/cereal-LICENSE
        copy /b /y vendor/concurrentqueue/LICENSE.md licenses/concurrentqueue-LICENSE.md
        copy /b /y vendor/cxxopts/LICENSE licenses/cxxopts-LICENSE
        copy /b /y vendor/fmt/LICENSE licenses/fmt-LICENSE
        copy /b /y vendor/imgui/imgui/LICENSE.txt licenses/imgui-LICENSE.txt
        copy /b /y vendor/lz4/lz4/LICENSE licenses/lz4-LICENSE
        copy /b /y vendor/mio/LICENSE licenses/mio-LICENSE
        copy /b /y vendor/SDL/LICENSE.txt licenses/SDL-LICENSE.txt
        copy /b /y vendor/tomlplusplus/LICENSE licenses/tomlplusplus-LICENSE
        copy /b /y vendor/xxHash/LICENSE licenses/xxHash-LICENSE
        copy /b /y LICENSE licenses/Ymir-LICENSE
        powershell Compress-Archive -Path "licenses/","build/apps/ymir-sdl3/ymir-sdl3.exe" -DestinationPath "${{ steps.strings.outputs.artifact-name }}.zip"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.strings.outputs.artifact-name }}
        path: ${{ steps.strings.outputs.artifact-name }}.zip

  build-linux:
    name: linux-${{ matrix.c_compiler }}-${{ matrix.x86_simd_ext.name }}
    runs-on: ubuntu-22.04

    strategy:
      fail-fast: false

      matrix:
        build_type: [Release]
        # Notes about compilers:
        # - GCC (gcc) gets stuck building sh2.cpp (didn't finish after 12+ hours)
        c_compiler: [clang]  # [clang, gcc]
        x86_simd_ext:
          - name: "SSE2"
            enable_avx2_option: "OFF"
          - name: "AVX2"
            enable_avx2_option: "ON"
        include:
          - c_compiler: clang
            cpp_compiler: clang++

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        echo "artifact-name=ymir-linux-${{ matrix.x86_simd_ext.name }}-${{ github.ref_name }}" >> "$GITHUB_OUTPUT"

    - name: Install SDL3 Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install build-essential git make pkg-config \
          cmake ninja-build gnome-desktop-testing \
          libasound2-dev libpulse-dev libaudio-dev \
          libjack-dev libsndio-dev libx11-dev \
          libxext-dev libxrandr-dev libxcursor-dev \
          libxfixes-dev libxi-dev libxss-dev \
          libxtst-dev libxkbcommon-dev libdrm-dev \
          libgbm-dev libgl1-mesa-dev libgles2-mesa-dev \
          libegl1-mesa-dev libdbus-1-dev libibus-1.0-dev \
          libudev-dev

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DBUILD_SHARED_LIBS=OFF
        -DYmir_AVX2=${{ matrix.x86_simd_ext.enable_avx2_option }}
        -DYmir_ENABLE_IPO=ON
        -DYmir_ENABLE_DEVLOG=OFF
        -DYmir_ENABLE_IMGUI_DEMO=OFF
        -DYmir_ENABLE_SANDBOX=OFF
        -DYmir_ENABLE_YMDASM=OFF
        -S ${{ github.workspace }}
        -G Ninja

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --parallel

    ## FIXME: Catch2 integration still isn't working
    #- name: Test
    #  working-directory: ${{ steps.strings.outputs.build-output-dir }}
    #  run: ctest --build-config ${{ matrix.build_type }}

    - name: Package artifacts
      run: |
        mkdir licenses
        cp -Rf apps/ymir-sdl3/res/licenses ./licenses/
        cp -f vendor/Catch2/LICENSE.txt licenses/Catch2-LICENSE.txt
        cp -f vendor/cereal/LICENSE licenses/cereal-LICENSE
        cp -f vendor/concurrentqueue/LICENSE.md licenses/concurrentqueue-LICENSE.md
        cp -f vendor/cxxopts/LICENSE licenses/cxxopts-LICENSE
        cp -f vendor/fmt/LICENSE licenses/fmt-LICENSE
        cp -f vendor/imgui/imgui/LICENSE.txt licenses/imgui-LICENSE.txt
        cp -f vendor/lz4/lz4/LICENSE licenses/lz4-LICENSE
        cp -f vendor/mio/LICENSE licenses/mio-LICENSE
        cp -f vendor/SDL/LICENSE.txt licenses/SDL-LICENSE.txt
        cp -f vendor/tomlplusplus/LICENSE licenses/tomlplusplus-LICENSE
        cp -f vendor/xxHash/LICENSE licenses/xxHash-LICENSE
        cp -f LICENSE licenses/Ymir-LICENSE
        tar cJvfh ${{ steps.strings.outputs.artifact-name }}.tar.xz LICENSE -C build/apps/ymir-sdl3 ymir-sdl3

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.strings.outputs.artifact-name }}
        path: ${{ steps.strings.outputs.artifact-name }}.tar.xz

  release:
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag'
    needs: [build-windows, build-linux]

    permissions:
      contents: write

    steps:
    - name: Download artifacts
      id: download-artifacts-step
      uses: actions/download-artifact@v4
      with:
        path: ymir
        pattern: ymir-*
        merge-multiple: true

    - name: Release
      uses: softprops/action-gh-release@v2
      with:
        draft: true
        files: ymir/*
