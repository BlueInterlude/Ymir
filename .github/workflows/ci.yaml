name: Build

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build-windows:
    name: windows-${{ matrix.c_compiler }}-${{ matrix.x86_simd_ext.name }}-${{ matrix.subsystem.name }}
    runs-on: windows-latest

    strategy:
      fail-fast: false

      matrix:
        build_type: [Release]
        # Notes about compilers:
        # - MSVC (cl) produces much slower code and takes a long time to complete the LTO step
        c_compiler: [clang] # [clang, cl]
        subsystem:
          - name: Console
            enable_devlog_option: "ON"
            build_ymdasm_option: "ON"
          - name: Win32
            enable_devlog_option: "OFF"
            build_ymdasm_option: "OFF"
        x86_simd_ext:
          - name: "SSE2"
            enable_avx2_option: "OFF"
          - name: "AVX2"
            enable_avx2_option: "ON"
        include:
          - c_compiler: clang
            cpp_compiler: clang

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Configure MSVC
        if: ${{ matrix.c_compiler == 'cl' }}
        uses: TheMrMilchmann/setup-msvc-dev@v3
        with:
          arch: x64

      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DBUILD_SHARED_LIBS=OFF
          -DYmir_AVX2=${{ matrix.x86_simd_ext.enable_avx2_option }}
          -DYmir_ENABLE_DEVLOG=${{ matrix.subsystem.enable_devlog_option }}
          -DYmir_ENABLE_IMGUI_DEMO=OFF
          -DYmir_ENABLE_SANDBOX=OFF
          -DYmir_ENABLE_YMDASM=${{ matrix.subsystem.build_ymdasm_option }}
          -S ${{ github.workspace }}
          -G Ninja

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --parallel

  build-linux:
    name: linux-${{ matrix.c_compiler }}-${{ matrix.x86_simd_ext.name }}
    runs-on: ubuntu-22.04

    strategy:
      fail-fast: false

      matrix:
        build_type: [Release]
        # Notes about compilers:
        # - GCC (gcc) gets stuck building sh2.cpp (didn't finish after 12+ hours)
        c_compiler: [clang] # [clang, gcc]
        x86_simd_ext:
          - name: "SSE2"
            enable_avx2_option: "OFF"
          - name: "AVX2"
            enable_avx2_option: "ON"
        include:
          - c_compiler: clang
            cpp_compiler: clang++

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install SDL3 Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install build-essential git make pkg-config \
            cmake ninja-build gnome-desktop-testing \
            libasound2-dev libpulse-dev libaudio-dev \
            libjack-dev libsndio-dev libx11-dev \
            libxext-dev libxrandr-dev libxcursor-dev \
            libxfixes-dev libxi-dev libxss-dev \
            libxtst-dev libxkbcommon-dev libdrm-dev \
            libgbm-dev libgl1-mesa-dev libgles2-mesa-dev \
            libegl1-mesa-dev libdbus-1-dev libibus-1.0-dev \
            libudev-dev

      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DBUILD_SHARED_LIBS=OFF
          -DYmir_AVX2=${{ matrix.x86_simd_ext.enable_avx2_option }}
          -DYmir_ENABLE_DEVLOG=OFF
          -DYmir_ENABLE_IMGUI_DEMO=OFF
          -DYmir_ENABLE_SANDBOX=OFF
          -DYmir_ENABLE_YMDASM=ON
          -S ${{ github.workspace }}
          -G Ninja

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --parallel

  build-macos:
    name: macos-${{ matrix.c_compiler }}-${{ matrix.arch.name }}
    runs-on: macos-latest

    strategy:
      fail-fast: false

      matrix:
        build_type: [Release]
        c_compiler: [clang]
        arch:
          - name: "arm64"
          - name: "x86_64"
        include:
          - c_compiler: clang
            cpp_compiler: clang++

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DBUILD_SHARED_LIBS=OFF
          -DCMAKE_OSX_ARCHITECTURES=${{ matrix.arch.name }}
          -DYmir_ENABLE_DEVLOG=OFF
          -DYmir_ENABLE_IMGUI_DEMO=OFF
          -DYmir_ENABLE_SANDBOX=OFF
          -DYmir_ENABLE_YMDASM=ON
          -S ${{ github.workspace }}
          -G Ninja

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --parallel
