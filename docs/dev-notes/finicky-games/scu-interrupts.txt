==================================================================
Games that rely on correct SCU interrupt mask vs. pending handling
==================================================================

Rayman
  This game fires an INTBACK request at the end of its SMPC interrupt handler which is always masked except for a brief
  window within the VBlank OUT handler. When the interrupt is unmasked, it is marked as pending. It is then masked again
  before leaving the interrupt handler, but *stays pending*. The relevant flow goes like this:

  1. The INTBACK is requested at the end of the SMPC interrupt handler and soon fired, but the SCU has the interrupt
     masked so it is not sent to the SH-2 nor is it marked as pending.
  2. The SH-2 eventually enters the VBlank OUT handler, setting SR.I3-0 to level F, effectively masking all interrupts.
     The SMPC interrupt has been masked in the SCU since then.
  3. At some point in the VBlank OUT handler, it unmasks the SMPC System Manager interrupt bit in the SCU. Since the
     interrupt signal is still raised and there was no other pending interrupt, it gets assigned as pending.
  4. Just before leaving the VBlank OUT interrupt handler, the SH-2 masks the SMPC System Manager interrupt again, but
     because it was already pending, it stays pending.
  5. The SH-2 exits the interrupt handler, restoring the previous value of SR.I3-0 (typically 0).
  6. Since the SCU is signaling that the SMPC System Manager interrupt is still pending and the SH-2 is now accepting
     all interrupts, the SH-2 enters the corresponding interrupt handler which processes the INTBACK response.
  
  The tricky part is that an interrupt that was assigned as pending remains in that state even if masked later.
  The SCU stores the pending interrupt and holds onto it until the SH-2 acknowledges it. The only other way to clear the
  pending interrupt from the SCU is to reset the chip.
